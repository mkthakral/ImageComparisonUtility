package loblaw.image.compare.testing;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import org.junit.jupiter.api.Test;

import loblaw.image.compare.constant.ImageUtilityConstants;
import loblaw.image.compare.helper.ImageProcessor;
import loblaw.image.compare.helper.format.ImageProcessOuput;

/**
 * @author Mohit Kumar Description: This is a JUnit Test case to test Image
 *         Compare Utility
 *
 */
class ImageProcessorTest {

	/**
	 * This test case tests the primary method in Image Compare Utility, takes input
	 * file and images from project, get it procesed, validate generated output
	 * 
	 * @throws Exception
	 */
	@Test
	void processInputPositiveTest() throws Exception {
		// Input file to test
		String inputFile = "./resources/input.csv";
		// Object of Image Processor, which would process the input file
		ImageProcessor imageProcessor = new ImageProcessor();
		// Output generated by Image Processor
		ImageProcessOuput imageProcessOuput = imageProcessor.processInput(inputFile);
		// Check if there are any custom errors, returned from Image Processor
		assertEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getError());
		// Check if Image Processor returned output file path
		assertNotNull(imageProcessOuput.getOutputFile());
		// Check if returned output file path is not blank
		assertNotEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getOutputFile());
		// Check if returned output file is a CSV file indeed
		assertTrue(imageProcessOuput.getOutputFile().endsWith(ImageUtilityConstants.EXTENSION_CSV));

		// Create objects to read input and output files
		BufferedReader bufferedReaderInput = new BufferedReader(new FileReader(inputFile));
		BufferedReader bufferedReaderOutput = new BufferedReader(new FileReader(imageProcessOuput.getOutputFile()));
		String currentRowOutputFile, currentRowInputFile;
		// Store Split row in input/output file in the form of array
		String[] currentRowOutputFileSplit, currentRowInputFileSplit;
		// Store execution time of all records
		double totalExecutionTime = 0;
		// Store row counter
		int rowCounter = 1;

		try {
			// Loop Input file, as Rows in input file should be same as rows in output file
			while ((currentRowInputFile = bufferedReaderInput.readLine()) != null) {

				// Read current line of output file
				currentRowOutputFile = bufferedReaderOutput.readLine();

				// Split current rows of input output in String array
				currentRowInputFileSplit = currentRowInputFile.split(ImageUtilityConstants.COMMA);
				currentRowOutputFileSplit = currentRowOutputFile.split(ImageUtilityConstants.COMMA);

				// Validate output current row is not null
				assertNotNull(currentRowOutputFile);
				// Validate output current row is not blank
				assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFile);
				// Validate Image 1 in input and output are same, of current row
				assertEquals(currentRowInputFileSplit[0], currentRowOutputFileSplit[0]);
				// Validate Image 2 in input and output are same, of current row
				assertEquals(currentRowInputFileSplit[1], currentRowOutputFileSplit[1]);
				// Validate percentage difference column is not blank
				assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFileSplit[2]);
				// Validate execution time column is not blank
				assertNotEquals(ImageUtilityConstants.STRING_BLANK, currentRowOutputFileSplit[3]);

				// As per input, first 3 rows should result in 0 difference percentage
				if (rowCounter < 4) {
					assertEquals("0", currentRowOutputFileSplit[2]);
				}
				// As per input, row 4 should result in this difference percentage
				else if (rowCounter == 4) {
					assertEquals("15.59", currentRowOutputFileSplit[2]);
				}
				// As per input, rest of the rows should contain error in difference percentage
				else {
					assertTrue(currentRowOutputFileSplit[2].contains(ImageUtilityConstants.ERROR));
				}

				// Accumulate execution time
				totalExecutionTime += Double.valueOf(currentRowOutputFileSplit[3]);
				// Increase row counter
				rowCounter++;
			}

			// Execution time for different systems can be different, so just validate that
			// total execution time is > 0
			assertTrue(totalExecutionTime > 0.0);

		} finally {
			// Close Input and Output File Connection
			bufferedReaderInput.close();
			bufferedReaderOutput.close();
			// Delete Output file generated by this test case
			File outputFile = new File(imageProcessOuput.getOutputFile());
			if (outputFile.exists())
				outputFile.delete();
		}
	}

	/**
	 * This method will test the image processor in case input CSV is blank
	 * @throws Exception
	 */
	@Test
	void processInputNegativeTest() throws Exception {
		// Input file to test
		String inputFile = "./resources/input-blank.csv";
		// Object of Image Processor, which would process the input file
		ImageProcessor imageProcessor = new ImageProcessor();
		// Output generated by Image Processor
		ImageProcessOuput imageProcessOuput = imageProcessor.processInput(inputFile);
		// Check if there are any custom errors, returned from Image Processor
		assertNotEquals(ImageUtilityConstants.STRING_BLANK, imageProcessOuput.getError());
	}

}
